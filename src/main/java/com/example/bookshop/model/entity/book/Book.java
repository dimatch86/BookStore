package com.example.bookshop.model.entity.book;

import com.example.bookshop.model.entity.author.Author;
import com.example.bookshop.model.entity.book.file.BookFile;
import com.example.bookshop.model.entity.book.review.BookReview;
import com.example.bookshop.model.entity.genre.Genre;
import com.example.bookshop.model.entity.tag.Tag;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "book")
@Data
@ApiModel(description = "entity representing a book")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    private long id;

    @Column(name = "pub_date", columnDefinition = "TIMESTAMP NOT NULL")
    @ApiModelProperty("date of book publication")
    private Date pubDate;

    @Column(name = "is_bestseller", columnDefinition = "INT NOT NULL")
    private int isBestseller;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("mnemonic identity")
    private String slug;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("book title")
    private String title;

    @ApiModelProperty("image url")
    private String image;

    @Column(columnDefinition = "TEXT")
    @ApiModelProperty("book description text")
    private String description;

    @Column(columnDefinition = "INT NOT NULL")
    @ApiModelProperty("book price without discount")
    private int price;

    @Column(columnDefinition = "INT NOT NULL DEFAULT 0")
    @ApiModelProperty("discount value of book")
    private int discount;

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "book2author", joinColumns = {@JoinColumn(name = "book_id")},
            inverseJoinColumns = {@JoinColumn(name = "author_id")})
    @JsonIgnore
    private List<Author> authors;

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "book2tag", joinColumns = {@JoinColumn(name = "book_id")},
            inverseJoinColumns = {@JoinColumn(name = "tag_id")})
    @JsonIgnore
    private List<Tag> tags;


    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)

    @JoinTable(name = "book2genre", joinColumns = {@JoinColumn(name = "book_id")},
            inverseJoinColumns = {@JoinColumn(name = "genre_id")})
    @JsonIgnore
    private List<Genre> genres;

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private List<BookFile> bookFiles = new ArrayList<>();

    @JsonProperty
    public Integer discountPrice() {
        return price - Math.toIntExact(Math.round(price * (discount/100d)));
    }

    @JsonGetter("authors")
    public String authorsName() {
        return authors.get(0).getName();
    }

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private List<BookRate> bookRates = new ArrayList<>();

    @OneToMany(mappedBy = "book")
    @JsonIgnore
    private List<BookReview> bookReviews = new ArrayList<>();
}
